#include<bits/stdc++.h>
using namespace std;
using ll=long long;
using ld=long double;
const ll mod=1e9+7;
const ll MAXN = 1e7+10;

//https://codeforces.com/submissions/Ashishgup
struct data{
	int mn;
	data() : mn(1e9) {};
};

struct SegTree{
    int N;
    vector<data> st;
    vector<bool> cLazy;
    vector<int> lazy;
 
    void init(int n)
    {
        N = n;
        st.resize(4 * N + 5);
        cLazy.assign(4 * N + 5, false);
        lazy.assign(4 * N + 5, 0);
    }
 
    //Write reqd merge functions
    void merge(data &cur, data &l, data &r) 
    {
        cur.mn = min(l.mn, r.mn);
    }
    
    //Handle lazy propagation appriopriately
    void propagate(int node, int L, int R)
    {
        if(L != R)
        {
            cLazy[node*2] = 1;
            cLazy[node*2 + 1] = 1;
            lazy[node*2] += lazy[node];
            lazy[node*2 + 1] += lazy[node]; 
        }
        st[node].mn += lazy[node];
        cLazy[node] = 0;
        lazy[node] = 0;
    }
 
    void build(int node, int L, int R)
    {
        if(L==R)
        {
            st[node].mn = 1e9;
            return;
        }
        int M=(L + R)/2;
        build(node*2, L, M);
        build(node*2 + 1, M + 1, R);
        merge(st[node], st[node*2], st[node*2+1]);
    }
 
    data Query(int node, int L, int R, int i, int j)
    {
        if(cLazy[node])
            propagate(node, L, R);
        if(j<L || i>R)
            return data();
        if(i<=L && R<=j)
            return st[node];
        int M = (L + R)/2;
        data left=Query(node*2, L, M, i, j);
        data right=Query(node*2 + 1, M + 1, R, i, j);
        data cur;
        merge(cur, left, right);
        return cur;
    }
 
    data pQuery(int node, int L, int R, int pos)
    {
        if(cLazy[node])
            propagate(node, L, R);
        if(L == R)
            return st[node];
        int M = (L + R)/2;
        if(pos <= M)
            return pQuery(node*2, L, M, pos);
        else
            return pQuery(node*2 + 1, M + 1, R, pos);
    }   
 
    void Update(int node, int L, int R, int i, int j, int val)
    {
        if(cLazy[node])
            propagate(node, L, R);
        if(j<L || i>R)
            return;
        if(i<=L && R<=j)
        {
            cLazy[node] = 1;
            lazy[node] = val;
            propagate(node, L, R);
            return;
        }
        int M = (L + R)/2;
        Update(node*2, L, M, i, j, val);
        Update(node*2 + 1, M + 1, R, i, j, val);
        merge(st[node], st[node*2], st[node*2 + 1]);
    }
 
    void pUpdate(int node, int L, int R, int pos, int val)
    {
        if(cLazy[node])
            propagate(node, L, R);
        if(L == R)
        {
            st[node].mn = val;
            return;
        }
        int M = (L + R)/2;
        if(pos <= M)
            pUpdate(node*2, L, M, pos, val);
        else
            pUpdate(node*2 + 1, M + 1, R, pos, val);
        merge(st[node], st[node*2], st[node*2 + 1]);
    }
 
    data query(int pos)
    {
        return pQuery(1, 1, N, pos);
    }
 
    data query(int l, int r)
    {
        return Query(1, 1, N, l, r);
    }
 
    void update(int pos, int val)
    {
        pUpdate(1, 1, N, pos, val);
    }
 
    void update(int l, int r, int val)
    {
        Update(1, 1, N, l, r, val);
    }
};




int query(int a){
    cout<<1<<" "<<a<<"\n";
    cout.flush();
    int e;cin>>e;
    return e;
}
int query1(int a){
    cout<<2<<" "<<a<<"\n";
    cout.flush();
    int e;cin>>e;
    return e;
}

void solve(){
    ll n,j=0;
    cin>>n;
    vector <ll> akash,res;
    ll val=1;
    ll mandal[23];
    mandal[0]=1;
    for (int i = 1; i < 21; i++) {
        val<<=1;
        cout<<1<<' '<<val<<endl;
        cin>>j;
        akash.push_back(j);
        mandal[i]=val;
    }
    val<<=1;
    mandal[21]=val;
    val<<=1;
    mandal[22]=val;
    ll rlsm=akash[19]-(mandal[20]*n),ansfind=0,sm;
    ansfind+=(rlsm%2);
    for (int i = 0; i <19 ; i++) {
        sm=rlsm+(mandal[i+1]*n);
        if(((sm-akash[i])/(mandal[i+2]))%2)
            ansfind+=mandal[i+1];
    }
    cout<<2<<' '<<ansfind<<endl;
    ll ty;
    cin>>ty;
    if(ty==-1)
        return;
   
}
  
        

int main(){
   
        ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
        int T=1;
        cin>>T;
        while(T--){
            solve();
        }
            
            
        return 0;
}
 
