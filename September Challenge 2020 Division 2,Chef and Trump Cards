#include<bits/stdc++.h>
using namespace std;
using ll=long long;
using ld=long double;
using ull=unsigned long long;
const int mod=1e9+7;
const ll N = 4e5+5;


vector<ll>ans,vec;
vector<int>adj[N];
vector<double>aka;
vector<pair<int,double>>dp[N];
int rok;double val;



void init(int n){
    ans.clear();vec.clear();aka.clear();vec.resize(n);
    for (int i = 0; i<=n; i++) {
        adj[i].clear();
    }
    for (int i = 0; i <=n; i++) {
        dp[i].clear();
    }
    
}
//https://www.geeksforgeeks.org/compute-ncr-p-set-3-using-fermat-little-theorem/
//Given three numbers n, r and p, compute value of nCr mod p. Here p is a prime number greater than n. Here nCr is Binomial Coefficient.

unsigned long long power(unsigned long long x, 
                         int y, int p) 
{ 
    unsigned long long res = 1; // Initialize result 
  
    x = x % p; // Update x if it is more than or 
    // equal to p 
  
    while (y > 0) { 
        // If y is odd, multiply x with result 
        if (y & 1) 
            res = (res * x) % p; 
  
        // y must be even now 
        y = y >> 1; // y = y/2 
        x = (x * x) % p; 
    } 
    return res; 
} 
  
// Returns n^(-1) mod p 
unsigned long long modInverse(unsigned long long n, int p) 
{ 
    return power(n, p - 2, p); 
} 
  
// Returns nCr % p using Fermat's little 
// theorem. 
unsigned long long nCrModPFermat(unsigned long long n, 
                                 int r, int p) 
{ 
    // Base case 
    if (r == 0) 
        return 1; 
  
    // Fill factorial array so that we 
    // can find all factorial of r, n 
    // and n-r 
    unsigned long long fac[n + 1]; 
    fac[0] = 1; 
    for (int i = 1; i <= n; i++) 
        fac[i] = (fac[i - 1] * i) % p; 
  
    return (fac[n] * modInverse(fac[r], p) % p * modInverse(fac[n - r], p) % p) % p; 
} 



void solve(){
   
    int n;
    cin>>n;
    map<int,int>mp;
    for (int i = 0; i < n; i++) {
        int a;
        cin>>a;
        mp[a]++;
    }
    
    ull ansr=power((ull)2,n,mod);
    vector<int>vr;
    for(auto it:mp){
        vr.push_back(it.second);
    }
    ll z=vr.back();
    if(z&1){
        cout<<ansr<<"\n";
        return;
    }
    ull r=power((ull)2,(int)(n-vr.back()),mod);
    ull tt=nCrModPFermat((ull)vr.back(),(int)(vr.back()/2),mod);
    ull xt=((r%mod)*(tt%mod))%mod;
    ll xx=ansr-xt;
    if(xx<0) xx+=mod;
    cout<<xx<<"\n";
    
    
    
}
  
        

int main(){
   
   
        ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
        int T=1;
        cin>>T;
        while(T--){
            solve();
        }
            
            
        return 0;
}
